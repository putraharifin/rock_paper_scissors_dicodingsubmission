# -*- coding: utf-8 -*-
"""submission_Muhammad_Putra_Harifin_Pane.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v_EZ6FrKeUCTmcDaFvCFwtNZssHoou_4

#Submission Dicoding Belajar Machine Learning Pemula
##Muhammad Putra Harifin Pane

Mengimpor Library yang Dibutuhkan:
"""

import tensorflow as tf

print(tf.__version__)

"""Mengunduh Dataset"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""Ekstraksi Dataset ke folder /tmp"""

import zipfile, os

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, mode='r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""Menyiapkan Direktori untuk Data Latih dan Validasi"""

base_dir = '/tmp/rockpaperscissors'

# path for train & validation
train_dir = os.path.join(base_dir, 'train')
val_dir = os.path.join(base_dir, 'val')

# create folder train & validation
os.mkdir(train_dir)
os.mkdir(val_dir)

"""membuat path folder rock, paper, scissors"""

rock_dir = os.path.join(base_dir, 'rock')
paper_dir = os.path.join(base_dir, 'paper')
scissors_dir = os.path.join(base_dir, 'scissors')

"""membuat path folder training dan validation rock, paper, scissors"""

# Train Path
train_rock_dir = os.path.join(train_dir, 'rock')
train_paper_dir = os.path.join(train_dir, 'paper')
train_scissors_dir = os.path.join(train_dir, 'scissors')

# Validation Path
val_rock_dir = os.path.join(val_dir, 'rock')
val_paper_dir = os.path.join(val_dir, 'paper')
val_scissors_dir = os.path.join(val_dir, 'scissors')

"""lanjut membuat folder setelah path di buat"""

# Train folder
os.mkdir(train_rock_dir)
os.mkdir(train_paper_dir)
os.mkdir(train_scissors_dir)

# Validation folder
os.mkdir(val_rock_dir)
os.mkdir(val_paper_dir)
os.mkdir(val_scissors_dir)

"""Membagi Data Train dan Validation dengan rasio Data Train 60% dan Data Validation 40%"""

from sklearn.model_selection import train_test_split

# separate train and validation set using [train_test_split]
train_rock, val_rock = train_test_split(os.listdir(rock_dir), test_size=0.4)
train_paper, val_paper = train_test_split(os.listdir(paper_dir), test_size=0.4)
train_scissors, val_scissors = train_test_split(os.listdir(scissors_dir), test_size=0.4)

"""Menyalin Gambar ke Folder Train dan validation"""

import shutil

# Loop train set for copy data to separate folder (train) using [shutil]
for img in train_rock:
  shutil.copy(os.path.join(rock_dir, img), os.path.join(train_rock_dir, img))

for img in train_paper:
  shutil.copy(os.path.join(paper_dir, img), os.path.join(train_paper_dir, img))

for img in train_scissors:
  shutil.copy(os.path.join(scissors_dir, img), os.path.join(train_scissors_dir, img))

# Loop validation set for copy data to separate folder (validation) using [shutil]
for img in val_rock:
  shutil.copy(os.path.join(rock_dir, img), os.path.join(val_rock_dir, img))

for img in val_paper:
  shutil.copy(os.path.join(paper_dir, img), os.path.join(val_paper_dir, img))

for img in val_scissors:
  shutil.copy(os.path.join(scissors_dir, img), os.path.join(val_scissors_dir, img))

"""Augmentasi gambar menggunakan ImageDataGenerator"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Augmentation Image with [ImageDataGenerator] for train datagen
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   horizontal_flip=True,
                                   shear_range=0.2,
                                   fill_mode='nearest')

# Augmentation Image with [ImageDataGenerator] for validation datagen
val_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   horizontal_flip=True,
                                   shear_range=0.2,
                                   fill_mode='nearest')

train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(150, 150),
                                                    batch_size=32,
                                                    class_mode='categorical')

validation_generator = val_datagen.flow_from_directory(val_dir,
                                                    target_size=(150, 150),
                                                    batch_size=32,
                                                    class_mode='categorical')

"""Membangun Model CNN"""

layers = tf.keras.layers

model = tf.keras.Sequential([
      tf.keras.layers.Conv2D(32, (3,3), activation= 'relu', input_shape = (150,150,3)),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Conv2D(64, (3,3), activation= 'relu'),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Conv2D(128, (3,3), activation= 'relu'),
      tf.keras.layers.MaxPool2D(2,2),
      tf.keras.layers.Flatten(),
      tf.keras.layers.Dropout(0.2),
      tf.keras.layers.Dense(512,activation= 'relu'),
      tf.keras.layers.Dense(3, activation= 'softmax')
])

model.summary()

"""Komplikasi dan Pelatihan Model"""

model.compile(loss='categorical_crossentropy', optimizer=tf.optimizers.Adam(), metrics=['accuracy'])

callbacks = tf.keras.callbacks.ModelCheckpoint(filepath='model.keras', verbose=1, save_best_only=True)

history = model.fit (
    train_generator,
    steps_per_epoch = 41,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 27,
    verbose = 2,
    callbacks = [callbacks]
)

"""Plot Grafik Akurasi dan Loss"""

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label = 'Train Accuracy')
plt.plot(history.history['val_accuracy'], label = 'Validation Accuracy')
plt.title('Accuracy Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc='lower right')
plt.show()

from matplotlib import pyplot as plt

plt.plot(history.history['loss'], label ='Training loss')
plt.plot(history.history['val_loss'], label = 'Validation loss')
plt.title('Loss Plot')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc='upper right')
plt.show()

"""Prediksi Gambar"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for file_myimage in uploaded.keys():

  path = file_myimage
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images= np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(file_myimage)
  if classes[0,0] !=0:
    print('kertas')
  elif classes[0,1] !=0:
    print('batu')
  else:
    print('gunting')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for file_myimage in uploaded.keys():

  path = file_myimage
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images= np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(file_myimage)
  if classes[0,0] !=0:
    print('kertas')
  elif classes[0,1] !=0:
    print('batu')
  else:
    print('gunting')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for file_myimage in uploaded.keys():

  path = file_myimage
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images= np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(file_myimage)
  if classes[0,0] !=0:
    print('kertas')
  elif classes[0,1] !=0:
    print('batu')
  else:
    print('gunting')

# Menyimpan model setelah training selesai
model.save('model_final.keras')